#global !p
#def math():
#	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
#
#def comment(): 
#	return vim.eval('vimtex#syntax#in_comment()') == '1'
#
#def env(name):
#	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
#	return x != '0' and y != '0'
#
## A overkill(dirty) table with automatic alignment feature
###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

#snippet * "italics"
#*${1:${VISUAL}}*$0
#endsnippet
#
#snippet ** "bold"
#**${1:${VISUAL}}**$0
#endsnippet
#
#snippet *** "bold italics"
#***${1:${VISUAL}}***$0
#endsnippet

snippet /* "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:https://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`$1\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`
$1
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:https://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet detail "Disclosure"
<details${3: open=""}>
  ${1:<summary>${2}</summary>}$0
</details>
endsnippet

# vim:ft=snippets:

###########################
##### Custom snippets #####
###########################

snippet qeq "Quad equal Quad"
\quad = \quad 
endsnippet

snippet venn "Venn diagrams"

$1) 

\begin{center}
    \includegraphics[width=100px]{$1}
\end{center}

$2
endsnippet

snippet comp<< "Comprension de conjunto"
\\{x \in U|$1 < x < $2 \\}
endsnippet

snippet comp<= "Comprension de conjunto"
\\{x \in U|$1 \leq x \leq $2 \\}
endsnippet

snippet qqb "Quad quad box"
\quad \quad \boxed{$1}
endsnippet


snippet venncap "Venn diagram with caption"

$1) 

\begin{center}
\begin{tabular}{c}
\includegraphics[width= 100px]{$1} \\\\
 $$2$ \\\\
 \end{tabular}
\end{center}


endsnippet

snippet eQ "equivalent" iA
\equiv 
endsnippet

snippet inD "index" iA
~!!~
endsnippet

snippet neQ "not equal" iA
\neq
endsnippet

snippet ranG "range" iA
${2:0} \leq $1 < ${3:\#xs} $4
endsnippet

snippet cardi "cardinal" iA
\#
endsnippet

snippet brang "bracket angled" iA
\langle $1 \rangle
endsnippet

snippet fA "forall" iA
\forall
endsnippet

snippet EE "exists" iA
\exists
endsnippet

snippet --> "arrow" iA
\rightarrow 
endsnippet

snippet inlist "in list" iA
\in_l
endsnippet

snippet anD "and" iA
\wedge 
endsnippet

snippet oR "or" iA
\vee 
endsnippet

snippet props "props" iA
$$\equiv \\{ \text{$0} \\}$$
endsnippet

snippet negg "negation" iA
\neg 
endsnippet

snippet undd "underline" iA
\underline{$1}
endsnippet

snippet bf "bold math" iA
\mathbf{$1}
endsnippet

snippet != "nequals" iA
\neq 
endsnippet

snippet squiG "squiggly arrow" iA
\rightsquigarrow 
endsnippet

snippet oP "oplus" iA
\oplus
endsnippet

snippet imP "implies" iA
\implies
endsnippet

snippet peG "pegado" iA
\triangleright
endsnippet

snippet SiG "Uppercase Sigma" iA
\Sigma
endsnippet

snippet PI "Uppercase Pi" iA
\Pi
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet NN "natural" iA
\mathbb{N}
endsnippet

snippet II "I" iA
\mathbb{I}
endsnippet

snippet KK "K" iA
\mathbb{K}
endsnippet

snippet uiN "undefined integral" iA
\int $1~dx $0
endsnippet

snippet diN "integral" wA
\int_{${1:-\infty}}^{${2:\infty}}$3~${4:dx} $0
endsnippet

snippet uP "up arrow" iA
\uparrow
endsnippet

snippet ++ "concatenation operator" iA
\concat 
endsnippet

snippet concatDef "concat command definition" iA
\newcommand{\concat}{%
  \mathbin{{+}\mspace{-8mu}{+}}%
}
endsnippet

snippet rA "Right arrow" iA
\Rightarrow  
endsnippet

snippet taY "taylor" wA
\frac{f^{(${1:n})}(${2:a})}{${3:n}!} $0
endsnippet

snippet fD "Function Derivation" iA
${1:f}^{(${2:n})}(${3:a}) $0 
endsnippet

#snippet sT "State" iA
#$\Brackets{\sigma_$1: $2 \mapsto $3}$\
#$0
#endsnippet
#
snippet pL "Program Line" iA
$\ell_{$1}\quad $2$\
$0
endsnippet

#snippet vD "Variable declaration" iA
#$Var~ $1: ${2:Int};$\
#$0
#endsnippet

snippet sT "state name" iA
$\sigma_{$1}$
endsnippet

snippet lN "line name" iA
$\ell_{$1}$
endsnippet

snippet mT "maps to" iA
\mapsto $0
endsnippet

snippet sQ "square" iA
\square~$0
endsnippet

snippet <= "less or equal" iA
 \leq $0
endsnippet

snippet >= "less or equal" iA
 \geq $0
endsnippet

snippet qU "quad" iA
 \quad $0
endsnippet

snippet ptR "program trace row" iA
| $$1$ | $$2$ | $$3$ | $4 |
$0
endsnippet

snippet conM "quad" iA
${1:\mathbb{K}}^{${2:n}\times ${3:n}} $0
endsnippet

snippet txT "text" iA
\text{ $1 } $0
endsnippet

snippet lrA "Leftrightarrow" iA
\Leftrightarrow 
endsnippet

snippet rH "Row header" iA
|    linea   | nombre del estado |       estado/guardas      |   aclaracion   |
|:----------:|:-----------------:|:-------------------------:|:--------------:|
|     -      |    $\sigma_{0}$   | $$1$                      | Estado inicial |
endsnippet

snippet tH "Terna de Hoare" iA
\\{${1:P}\\}~${3:S}~\\{${2:Q}\\} $0
endsnippet

snippet TH "Terna de Hoare" iA
$$\\{${1:P}\\}$$
$$$3$$
$$\\{${2:Q}\\}$$
$0
endsnippet

###########################
##### LaTeX snippets #####
###########################
#
snippet mk "Math" wA
$$${1}$$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet ms "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet sqrt "\sqrt{}"
\sqrt{${1:${VISUAL}}} $0
endsnippet
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet


#
#priority 100
#snippet ... "ldots" iA
#\ldots
#endsnippet
#
#snippet table "Table environment" b
#\begin{table}[${1:htpb}]
#	\centering
#	\caption{${2:caption}}
#	\label{tab:${3:label}}
#	\begin{tabular}{${5:c}}
#	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
#	\end{tabular}
#\end{table}
#endsnippet
#
#snippet fig "Figure environment" b
#\begin{figure}[${1:htpb}]
#	\centering
#	${2:\includegraphics[width=0.8\textwidth]{$3}}
#	\caption{${4:$3}}
#	\label{fig:${5:${3/\W+/-/g}}}
#\end{figure}
#endsnippet
#
#snippet pac "Package" b
#\usepackage[${1:options}]{${2:package}}$0
#endsnippet
#
#snippet => "implies" Ai
#\implies
#endsnippet
#
#snippet =< "implied by" Ai
#\impliedby
#endsnippet
#
#context "math()"
#snippet iff "iff" Ai
#\iff
#endsnippet
#
#
#snippet dm "Math" wA
#\[
#${1:${VISUAL}}
#.\] $0
#endsnippet
#
#snippet ali "Align" bA
#\begin{align*}
#	${1:${VISUAL}}
#.\end{align*}
#endsnippet
#
#

snippet / "Fraction" i
\\frac{$1}{$2}$0
endsnippet

#context "math()"
#snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
#\\frac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet
#
#priority 1000
#context "math()"
#snippet '^.*\)/' "() frac" wrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	if stripped[i] == ')': depth += 1
#	if stripped[i] == '(': depth -= 1
#	if depth == 0: break;
#	i-=1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet
#
#context "math()"
#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet
#
#context "math()"
#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
#endsnippet
#
#
#snippet sympy "sympyblock " w
#sympy $1 sympy$0
#endsnippet
#
#priority 10000
#snippet 'sympy(.*)sympy' "sympy" wr
#`!p
#from sympy import *
#x, y, z, t = symbols('x y z t')
#k, m, n = symbols('k m n', integer=True)
#f, g, h = symbols('f g h', cls=Function)
#init_printing()
#snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
#`
#endsnippet
#
#priority 1000
#snippet math "mathematicablock" w
#math $1 math$0
#endsnippet
#
#priority 10000
#snippet 'math(.*)math' "math" wr
#`!p
#import subprocess
#code = match.group(1)
#code = 'ToString[' + code + ', TeXForm]'
#snip.rv = subprocess.check_output(['wolframscript', '-code', code])
#`
#endsnippet
#
#context "math()"
#snippet ceil "ceil" iA
#\left\lceil $1 \right\rceil $0
#endsnippet
#
#context "math()"
#snippet floor "floor" iA
#\left\lfloor $1 \right\rfloor$0
#endsnippet
#
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet
#
#context "math()"
#snippet () "left( right)" iA
#\left( ${1:${VISUAL}} \right) $0
#endsnippet
#
#snippet lr "left( right)" i
#\left( ${1:${VISUAL}} \right) $0
#endsnippet
#
#snippet lr( "left( right)" i
#\left( ${1:${VISUAL}} \right) $0
#endsnippet
#
#snippet lr| "left| right|" i
#\left| ${1:${VISUAL}} \right| $0
#endsnippet
#
#snippet lr{ "left\{ right\}" i
#\left\\{ ${1:${VISUAL}} \right\\} $0
#endsnippet
#
#snippet lrb "left\{ right\}" i
#\left\\{ ${1:${VISUAL}} \right\\} $0
#endsnippet
#
#snippet lr[ "left[ right]" i
#\left[ ${1:${VISUAL}} \right] $0
#endsnippet
#
#snippet lra "leftangle rightangle" iA
#\left<${1:${VISUAL}} \right>$0
#endsnippet
#
#context "math()"
#snippet conj "conjugate" iA
#\overline{$1}$0
#endsnippet
#
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n}
endsnippet
#
#snippet taylor "taylor" w
#\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
#endsnippet
#
#
#snippet prod "product" w
#\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
#endsnippet
#
#snippet part "d/dx" w
#\frac{\partial ${1:V}}{\partial ${2:x}} $0
#endsnippet
#
#context "math()"
#
#context "math()"
#snippet sr "^2" iA
#^2
#endsnippet
#
#context "math()"
#snippet cb "^3" iA
#^3
#endsnippet
#
#context "math()"
#snippet td "to the ... power" iA
#^{$1}$0
#endsnippet
#
#context "math()"
#snippet rd "to the ... power" iA
#^{($1)}$0
#endsnippet
#
#snippet __ "subscript" iA
#_{$1}$0
#endsnippet
#
#snippet ooo "\infty" iA
#\infty
#endsnippet
#
#snippet rij "mrij" i
#(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
#endsnippet
#
#snippet <= "leq" 
#\le 
#endsnippet
#
#snippet >= "geq" iA
#\ge 
#endsnippet
#
#context "math()"
#snippet EE "geq" iA
#\exists 
#endsnippet
#
#context "math()"
#snippet AA "forall" iA
#\forall 
#endsnippet
#
#context "math()"
#snippet xnn "xn" iA
#x_{n}
#endsnippet
#
#context "math()"
#snippet ynn "yn" iA
#y_{n}
#endsnippet
#
#
#context "math()"
#snippet xii "xi" iA
#x_{i}
#endsnippet
#
#context "math()"
#snippet yii "yi" iA
#y_{i}
#endsnippet
#
#context "math()"
#snippet xjj "xj" iA
#x_{j}
#endsnippet
#
#context "math()"
#snippet yjj "yj" iA
#y_{j}
#endsnippet
#
#context "math()"
#snippet xp1 "x" iA
#x_{n+1}
#endsnippet
#
#context "math()"
#snippet xmm "x" iA
#x_{m}
#endsnippet
#
#snippet R0+ "R0+" iA
#\\R_0^+
#endsnippet
#
#snippet plot "Plot" w
#\begin{figure}[$1]
#	\centering
#	\begin{tikzpicture}
#		\begin{axis}[
#			xmin= ${2:-10}, xmax= ${3:10},
#			ymin= ${4:-10}, ymax = ${5:10},
#			axis lines = middle,
#		]
#			\addplot[domain=$2:$3, samples=${6:100}]{$7};
#		\end{axis}
#	\end{tikzpicture}
#	\caption{$8}
#	\label{${9:$8}}
#\end{figure}
#endsnippet
#
#snippet nn "Tikz node" w
#\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
#$0
#endsnippet
#
#context "math()"
#snippet mcal "mathcal" iA
#\mathcal{$1}$0
#endsnippet
#
#snippet lll "l" iA
#\ell
#endsnippet
#
#context "math()"
#snippet nabl "nabla" iA
#\nabla 
#endsnippet
#
#context "math()"
snippet xx "cross" iA
\times 
endsnippet
#
#priority 100
#snippet '([a-zA-Z])\*\*' "Potence"
#`!p snip.rv = match.group(1)`^$1 
#endsnippet
#
#context "math()"
#snippet norm "norm" iA
#\|$1\|$0
#endsnippet
#
#priority 100
#context "math()"
#snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
#\\`!p snip.rv = match.group(1)`
#endsnippet
#
#priority 300
#context "math()"
#
#priority 200
#context "math()"
#snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
#\\`!p snip.rv = match.group(1)`
#endsnippet
#
#
#priority 100
#context "math()"
#snippet -> "to" iA
#\to 
#endsnippet
#
#priority 200
#context "math()"
#snippet <-> "leftrightarrow" iA
#\leftrightarrow
#endsnippet
#
#context "math()"
#snippet !> "mapsto" iA
#\mapsto 
#endsnippet
#
#context "math()"
#snippet invs "inverse" iA
#^{-1}
#endsnippet
#
#context "math()"
#snippet compl "complement" iA
#^{c}
#endsnippet
#
#context "math()"
#snippet \\\ "setminus" iA
#\setminus
#endsnippet
#
#snippet >> ">>" 
#\gg
#endsnippet
#
#snippet << "<<"
#\ll
#endsnippet
#
#
#snippet ~~ "~" iA
#\sim 
#endsnippet
#
#context "math()"
#
#snippet || "mid" iA
# \mid 
#endsnippet
#
#
#context "math()"
#snippet cc "subset" Ai
#\subset 
#endsnippet
#
#snippet notin "not in " iA
#\not\in 
#endsnippet
#
#context "math()"
#snippet inn "in " iA
#\in 
#endsnippet
#
#snippet NN "n" iA
#\N
#endsnippet
#
#snippet Nn "cap" iA
#\cap 
#endsnippet
#
#snippet UU "cup" iA
#\cup 
#endsnippet
#
#snippet uuu "bigcup" iA
#\bigcup_{${1:i \in ${2: I}}} $0
#endsnippet
#
#snippet nnn "bigcap" iA
#\bigcap_{${1:i \in ${2: I}}} $0
#endsnippet
#
#snippet OO "emptyset" iA
#\O
#endsnippet
#
#
#snippet QQ "Q" iA
#\mathbb{Q}
#endsnippet
#
#snippet ZZ "Z" iA
#\mathbb{Z}
#endsnippet
#
#snippet <! "normal" iA
#\triangleleft 
#endsnippet
#
#snippet <> "hokje" iA
#\diamond 
#endsnippet
#
#
#context "math()"
#snippet '(?<!i)sts' "text subscript" irA
#_\text{$1} $0
#endsnippet
#
#context "math()"
#snippet tt "text" iA
#\text{$1}$0
#endsnippet
#
#context "math()"
#snippet case "cases" wA
#\begin{cases}
#	$1
#\end{cases}
#endsnippet
#
#snippet SI "SI" iA
#\SI{$1}{$2}
#endsnippet
#
#snippet bigfun "Big function" iA
#\begin{align*}
#	$1: $2 &\longrightarrow $3 \\\\
#	$4 &\longmapsto $1($4) = $0
#.\end{align*}
#endsnippet
#
#snippet cvec "column vector" iA
#\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
#endsnippet
#
#priority 10
#context "math()"
#snippet "bar" "bar" riA
#\overline{$1}$0
#endsnippet
#
#priority 100
#context "math()"
#snippet "([a-zA-Z])bar" "bar" riA
#\overline{`!p snip.rv=match.group(1)`}
#endsnippet
#
#priority 10
#context "math()"
#snippet "hat" "hat" riA
#\hat{$1}$0
#endsnippet
#
#priority 100
#context "math()"
#snippet "([a-zA-Z])hat" "hat" riA
#\hat{`!p snip.rv=match.group(1)`}
#endsnippet
#
#snippet letw "let omega" iA
#Let $\Omega \subset \C$ be open.
#endsnippet
#
#
#snippet HH "H" iA
#\mathbb{H}
#endsnippet
#
#snippet DD "D" iA
#\mathbb{D}
#endsnippet
#
## vim:ft=snippets
