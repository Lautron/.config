# Luke's lf settings


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# Custom Functions
cmd open &{{
    set -f; rifle -p 0 $fx
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd fzf_jump ${{
  res="$(fd -d 3 | fzf --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_folders ${{
  res="$(fd -t d -d 3 | fzf --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  res="$(broot)"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_folders ${{
  res="$(broot -f)"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd dragon %dragon-drop -a -x $fx
cmd okular &okular $fx

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd paste-overwrite %{{
         mode=$(head -1 ~/.local/share/lf/files)
         list=$(sed 1d ~/.local/share/lf/files)
         if [ $mode = 'copy' ]; then
              cp -r $list .
         elif [ $mode = 'move' ]; then
             mv $list .
         fi
         lf -remote 'send load'
         lf -remote 'send clear'
}}
# Bindings
# Remove some defaults
map m
map /
#map o
#map n
#map "'"
#map '"'
map d
map c
map e

# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map DD trash
map tr restore_trash

# Broot Mapping

# Dragon Mapping
map dr dragon
map ok okular

# Basic Functions
map . set hidden!
#map DD delete
map p
map pp paste
map po paste-overwrite
map dd cut
map yy copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ch chmod
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

map g. :cd ~/.config; fzf_folders
map gd :cd ~/Downloads; set reverse true; set sortby time; set info time
map gf :cd ~/Documents/Facultad; fzf_folders
map gc :cd ~/Documents/code; fzf_folders
map g3 :cd ~/Documents/impresion_3D; fzf_folders
map gs :cd ~/Documents/code/clients/michiel/morphais-ng/morphais_ng/data/; fzf_folders
map gb :cd ~/Documents/books; fzf_folders
map gm :cd /run/media/lautarob

map st :set reverse true; set sortby time; set info time
map sa :set reverse true; set sortby atime; set info atime
map sc :set reverse true; set sortby ctime; set info ctime

map S $fish
map / fzf_jump

map br $vimv $fx

map xt $highext $fx
map cc $llmcontext $fx

map en $nvim .
map eg $nvim +G +only

